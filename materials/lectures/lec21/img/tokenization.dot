digraph TokenizationModels {
    rankdir=LR;
    node [shape=box, style=filled, fillcolor=lightblue];

    subgraph cluster_character {
        label = "Character-Based Model";
        style=dashed;

        faster_c0 [label="f"];
        faster_c1 [label="a"];
        faster_c2 [label="s"];
        faster_c3 [label="t"];
        faster_c4 [label="e"];
        faster_c5 [label="r"];

        fastest_c0 [label="f"];
        fastest_c1 [label="a"];
        fastest_c2 [label="s"];
        fastest_c3 [label="t"];
        fastest_c4 [label="e"];
        fastest_c5 [label="s"];
        fastest_c6 [label="t"];

        quickest_c0 [label="q"];
        quickest_c1 [label="u"];
        quickest_c2 [label="i"];
        quickest_c3 [label="c"];
        quickest_c4 [label="k"];
        quickest_c5 [label="e"];
        quickest_c6 [label="s"];
        quickest_c7 [label="t"];

        // Connect letters horizontally
        faster_c0 -> faster_c1 -> faster_c2 -> faster_c3 -> faster_c4 -> faster_c5;
        fastest_c0 -> fastest_c1 -> fastest_c2 -> fastest_c3 -> fastest_c4 -> fastest_c5 -> fastest_c6;
        quickest_c0 -> quickest_c1 -> quickest_c2 -> quickest_c3 -> quickest_c4 -> quickest_c5 -> quickest_c6 -> quickest_c7;
    }

    subgraph cluster_bpe {
        label = "Byte-Pairing Model";
        style=dashed;
        node [fillcolor=gold];

        bpe_faster_0 [label="fast"];
        bpe_faster_1 [label="er"];

        bpe_fastest_0 [label="fast"];
        bpe_fastest_1 [label="est"];

        bpe_quickest_0 [label="quick"];
        bpe_quickest_1 [label="est"];

        // Connect subwords
        bpe_faster_0 -> bpe_faster_1;
        bpe_fastest_0 -> bpe_fastest_1;
        bpe_quickest_0 -> bpe_quickest_1;
    }

    subgraph cluster_word {
        label = "Word-Based Model";
        style=dashed;
        node [fillcolor=lightsalmon];

        word_faster [label="faster"];
        word_fastest [label="fastest"];
        word_quickest [label="quickest"];
    }

    // Layout help: align vertically
    {rank = same; faster_c0; bpe_faster_0; word_faster;}
    {rank = same; fastest_c0; bpe_fastest_0; word_fastest;}
    {rank = same; quickest_c0; bpe_quickest_0; word_quickest;}

    // Optional: directional arrows for information
    info_increase [label="Increase Information per Token", shape=plaintext];
    vocab_decrease [label="Decrease Number of Tokens", shape=plaintext];

    vocab_decrease -> info_increase [dir=both, style=bold, color=green];
}